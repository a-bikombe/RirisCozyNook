{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Arianna/Code/RirisCozyNook/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { bootstrapApplication } from '@angular/platform-browser';\nimport { BehaviorSubject } from 'rxjs';\nimport { stringify } from 'telejson';\nimport { getApplication } from './StorybookModule';\nimport { storyPropsProvider } from './StorybookProvider';\nimport { queueBootstrapping } from './utils/BootstrapQueue';\nimport { PropertyExtractor } from './utils/PropertyExtractor';\nimport { getProvideZonelessChangeDetectionFn } from './utils/Zoneless';\nconst applicationRefs = new Map();\n/**\n * Attribute name for the story UID that may be written to the targetDOMNode.\n *\n * If a target DOM node has a story UID attribute, it will be used as part of the selector for the\n * Angular component.\n */\nexport const STORY_UID_ATTRIBUTE = 'data-sb-story-uid';\nexport class AbstractRenderer {\n  constructor() {\n    this.previousStoryRenderInfo = new Map();\n  }\n  /** Wait and destroy the platform */\n  static resetApplications(domNode) {\n    applicationRefs.forEach((appRef, appDOMNode) => {\n      if (!appRef.destroyed && (!domNode || appDOMNode === domNode)) {\n        appRef.destroy();\n      }\n    });\n  }\n  /**\n   * Bootstrap main angular module with main component or send only new `props` with storyProps$\n   *\n   * @param storyFnAngular {StoryFnAngularReturnType}\n   * @param forced {boolean} If :\n   *\n   *   - True render will only use the StoryFn `props' in storyProps observable that will update sotry's\n   *       component/template properties. Improves performance without reloading the whole\n   *       module&component if props changes\n   *   - False fully recharges or initializes angular module & component\n   *\n   * @param component {Component}\n   */\n  render({\n    storyFnAngular,\n    forced,\n    component,\n    targetDOMNode\n  }) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const targetSelector = _this.generateTargetSelectorFromStoryId(targetDOMNode.id);\n      const newStoryProps$ = new BehaviorSubject(storyFnAngular.props);\n      if (!_this.fullRendererRequired({\n        targetDOMNode,\n        storyFnAngular,\n        moduleMetadata: {\n          ...storyFnAngular.moduleMetadata\n        },\n        forced\n      })) {\n        _this.storyProps$.next(storyFnAngular.props);\n        return;\n      }\n      yield _this.beforeFullRender(targetDOMNode);\n      // Complete last BehaviorSubject and set a new one for the current module\n      if (_this.storyProps$) {\n        _this.storyProps$.complete();\n      }\n      _this.storyProps$ = newStoryProps$;\n      _this.initAngularRootElement(targetDOMNode, targetSelector);\n      const analyzedMetadata = new PropertyExtractor(storyFnAngular.moduleMetadata, component);\n      yield analyzedMetadata.init();\n      const storyUid = _this.generateStoryUIdFromRawStoryUid(targetDOMNode.getAttribute(STORY_UID_ATTRIBUTE));\n      const componentSelector = storyUid !== null ? `${targetSelector}[${storyUid}]` : targetSelector;\n      if (storyUid !== null) {\n        const element = targetDOMNode.querySelector(targetSelector);\n        element.toggleAttribute(storyUid, true);\n      }\n      const application = getApplication({\n        storyFnAngular,\n        component,\n        targetSelector: componentSelector,\n        analyzedMetadata\n      });\n      const providers = [storyPropsProvider(newStoryProps$), ...analyzedMetadata.applicationProviders, ...(storyFnAngular.applicationConfig?.providers ?? [])];\n      if (STORYBOOK_ANGULAR_OPTIONS?.experimentalZoneless) {\n        const provideZonelessChangeDetectionFn = yield getProvideZonelessChangeDetectionFn();\n        if (!provideZonelessChangeDetectionFn) {\n          throw new Error('Zoneless change detection requires Angular 18 or higher');\n        } else {\n          providers.unshift(provideZonelessChangeDetectionFn());\n        }\n      }\n      const applicationRef = yield queueBootstrapping(() => {\n        return bootstrapApplication(application, {\n          ...storyFnAngular.applicationConfig,\n          providers\n        });\n      });\n      applicationRefs.set(targetDOMNode, applicationRef);\n    })();\n  }\n  /**\n   * Only ASCII alphanumerics can be used as HTML tag name. https://html.spec.whatwg.org/#elements-2\n   *\n   * Therefore, stories break when non-ASCII alphanumerics are included in target selector.\n   * https://github.com/storybookjs/storybook/issues/15147\n   *\n   * This method returns storyId when it doesn't contain any non-ASCII alphanumerics. Otherwise, it\n   * generates a valid HTML tag name from storyId by removing non-ASCII alphanumerics from storyId,\n   * prefixing \"sb-\", and suffixing \"-component\"\n   *\n   * @memberof AbstractRenderer\n   * @protected\n   */\n  generateTargetSelectorFromStoryId(id) {\n    const invalidHtmlTag = /[^A-Za-z0-9-]/g;\n    const storyIdIsInvalidHtmlTagName = invalidHtmlTag.test(id);\n    return storyIdIsInvalidHtmlTagName ? `sb-${id.replace(invalidHtmlTag, '')}-component` : id;\n  }\n  /**\n   * Angular is unable to handle components that have selectors with accented attributes.\n   *\n   * Therefore, stories break when meta's title contains accents.\n   * https://github.com/storybookjs/storybook/issues/29132\n   *\n   * This method filters accents from a given raw id. For example, this method converts\n   * 'Example/Button with an \"Ã©\" accent' into 'Example/Button with an \"e\" accent'.\n   *\n   * @memberof AbstractRenderer\n   * @protected\n   */\n  generateStoryUIdFromRawStoryUid(rawStoryUid) {\n    if (rawStoryUid === null) {\n      return rawStoryUid;\n    }\n    const accentCharacters = /[\\u0300-\\u036f]/g;\n    return rawStoryUid.normalize('NFD').replace(accentCharacters, '');\n  }\n  /** Adds DOM element that angular will use as bootstrap component. */\n  initAngularRootElement(targetDOMNode, targetSelector) {\n    targetDOMNode.innerHTML = '';\n    targetDOMNode.appendChild(document.createElement(targetSelector));\n  }\n  fullRendererRequired({\n    targetDOMNode,\n    storyFnAngular,\n    moduleMetadata,\n    forced\n  }) {\n    const previousStoryRenderInfo = this.previousStoryRenderInfo.get(targetDOMNode);\n    const currentStoryRender = {\n      storyFnAngular,\n      moduleMetadataSnapshot: stringify(moduleMetadata, {\n        maxDepth: 50\n      })\n    };\n    this.previousStoryRenderInfo.set(targetDOMNode, currentStoryRender);\n    if (\n    // check `forceRender` of story RenderContext\n    !forced ||\n    // if it's the first rendering and storyProps$ is not init\n    !this.storyProps$) {\n      return true;\n    }\n    // force the rendering if the template has changed\n    const hasChangedTemplate = !!storyFnAngular?.template && previousStoryRenderInfo?.storyFnAngular?.template !== storyFnAngular.template;\n    if (hasChangedTemplate) {\n      return true;\n    }\n    // force the rendering if the metadata structure has changed\n    const hasChangedModuleMetadata = currentStoryRender.moduleMetadataSnapshot !== previousStoryRenderInfo?.moduleMetadataSnapshot;\n    return hasChangedModuleMetadata;\n  }\n}","map":{"version":3,"names":["bootstrapApplication","BehaviorSubject","stringify","getApplication","storyPropsProvider","queueBootstrapping","PropertyExtractor","getProvideZonelessChangeDetectionFn","applicationRefs","Map","STORY_UID_ATTRIBUTE","AbstractRenderer","constructor","previousStoryRenderInfo","resetApplications","domNode","forEach","appRef","appDOMNode","destroyed","destroy","render","storyFnAngular","forced","component","targetDOMNode","_this","_asyncToGenerator","targetSelector","generateTargetSelectorFromStoryId","id","newStoryProps$","props","fullRendererRequired","moduleMetadata","storyProps$","next","beforeFullRender","complete","initAngularRootElement","analyzedMetadata","init","storyUid","generateStoryUIdFromRawStoryUid","getAttribute","componentSelector","element","querySelector","toggleAttribute","application","providers","applicationProviders","applicationConfig","STORYBOOK_ANGULAR_OPTIONS","experimentalZoneless","provideZonelessChangeDetectionFn","Error","unshift","applicationRef","set","invalidHtmlTag","storyIdIsInvalidHtmlTagName","test","replace","rawStoryUid","accentCharacters","normalize","innerHTML","appendChild","document","createElement","get","currentStoryRender","moduleMetadataSnapshot","maxDepth","hasChangedTemplate","template","hasChangedModuleMetadata"],"sources":["C:/Users/Arianna/Code/RirisCozyNook/frontend/node_modules/@storybook/angular/dist/client/angular-beta/AbstractRenderer.mjs"],"sourcesContent":["import { bootstrapApplication } from '@angular/platform-browser';\nimport { BehaviorSubject } from 'rxjs';\nimport { stringify } from 'telejson';\nimport { getApplication } from './StorybookModule';\nimport { storyPropsProvider } from './StorybookProvider';\nimport { queueBootstrapping } from './utils/BootstrapQueue';\nimport { PropertyExtractor } from './utils/PropertyExtractor';\nimport { getProvideZonelessChangeDetectionFn } from './utils/Zoneless';\nconst applicationRefs = new Map();\n/**\n * Attribute name for the story UID that may be written to the targetDOMNode.\n *\n * If a target DOM node has a story UID attribute, it will be used as part of the selector for the\n * Angular component.\n */\nexport const STORY_UID_ATTRIBUTE = 'data-sb-story-uid';\nexport class AbstractRenderer {\n    constructor() {\n        this.previousStoryRenderInfo = new Map();\n    }\n    /** Wait and destroy the platform */\n    static resetApplications(domNode) {\n        applicationRefs.forEach((appRef, appDOMNode) => {\n            if (!appRef.destroyed && (!domNode || appDOMNode === domNode)) {\n                appRef.destroy();\n            }\n        });\n    }\n    /**\n     * Bootstrap main angular module with main component or send only new `props` with storyProps$\n     *\n     * @param storyFnAngular {StoryFnAngularReturnType}\n     * @param forced {boolean} If :\n     *\n     *   - True render will only use the StoryFn `props' in storyProps observable that will update sotry's\n     *       component/template properties. Improves performance without reloading the whole\n     *       module&component if props changes\n     *   - False fully recharges or initializes angular module & component\n     *\n     * @param component {Component}\n     */\n    async render({ storyFnAngular, forced, component, targetDOMNode, }) {\n        const targetSelector = this.generateTargetSelectorFromStoryId(targetDOMNode.id);\n        const newStoryProps$ = new BehaviorSubject(storyFnAngular.props);\n        if (!this.fullRendererRequired({\n            targetDOMNode,\n            storyFnAngular,\n            moduleMetadata: {\n                ...storyFnAngular.moduleMetadata,\n            },\n            forced,\n        })) {\n            this.storyProps$.next(storyFnAngular.props);\n            return;\n        }\n        await this.beforeFullRender(targetDOMNode);\n        // Complete last BehaviorSubject and set a new one for the current module\n        if (this.storyProps$) {\n            this.storyProps$.complete();\n        }\n        this.storyProps$ = newStoryProps$;\n        this.initAngularRootElement(targetDOMNode, targetSelector);\n        const analyzedMetadata = new PropertyExtractor(storyFnAngular.moduleMetadata, component);\n        await analyzedMetadata.init();\n        const storyUid = this.generateStoryUIdFromRawStoryUid(targetDOMNode.getAttribute(STORY_UID_ATTRIBUTE));\n        const componentSelector = storyUid !== null ? `${targetSelector}[${storyUid}]` : targetSelector;\n        if (storyUid !== null) {\n            const element = targetDOMNode.querySelector(targetSelector);\n            element.toggleAttribute(storyUid, true);\n        }\n        const application = getApplication({\n            storyFnAngular,\n            component,\n            targetSelector: componentSelector,\n            analyzedMetadata,\n        });\n        const providers = [\n            storyPropsProvider(newStoryProps$),\n            ...analyzedMetadata.applicationProviders,\n            ...(storyFnAngular.applicationConfig?.providers ?? []),\n        ];\n        if (STORYBOOK_ANGULAR_OPTIONS?.experimentalZoneless) {\n            const provideZonelessChangeDetectionFn = await getProvideZonelessChangeDetectionFn();\n            if (!provideZonelessChangeDetectionFn) {\n                throw new Error('Zoneless change detection requires Angular 18 or higher');\n            }\n            else {\n                providers.unshift(provideZonelessChangeDetectionFn());\n            }\n        }\n        const applicationRef = await queueBootstrapping(() => {\n            return bootstrapApplication(application, {\n                ...storyFnAngular.applicationConfig,\n                providers,\n            });\n        });\n        applicationRefs.set(targetDOMNode, applicationRef);\n    }\n    /**\n     * Only ASCII alphanumerics can be used as HTML tag name. https://html.spec.whatwg.org/#elements-2\n     *\n     * Therefore, stories break when non-ASCII alphanumerics are included in target selector.\n     * https://github.com/storybookjs/storybook/issues/15147\n     *\n     * This method returns storyId when it doesn't contain any non-ASCII alphanumerics. Otherwise, it\n     * generates a valid HTML tag name from storyId by removing non-ASCII alphanumerics from storyId,\n     * prefixing \"sb-\", and suffixing \"-component\"\n     *\n     * @memberof AbstractRenderer\n     * @protected\n     */\n    generateTargetSelectorFromStoryId(id) {\n        const invalidHtmlTag = /[^A-Za-z0-9-]/g;\n        const storyIdIsInvalidHtmlTagName = invalidHtmlTag.test(id);\n        return storyIdIsInvalidHtmlTagName ? `sb-${id.replace(invalidHtmlTag, '')}-component` : id;\n    }\n    /**\n     * Angular is unable to handle components that have selectors with accented attributes.\n     *\n     * Therefore, stories break when meta's title contains accents.\n     * https://github.com/storybookjs/storybook/issues/29132\n     *\n     * This method filters accents from a given raw id. For example, this method converts\n     * 'Example/Button with an \"Ã©\" accent' into 'Example/Button with an \"e\" accent'.\n     *\n     * @memberof AbstractRenderer\n     * @protected\n     */\n    generateStoryUIdFromRawStoryUid(rawStoryUid) {\n        if (rawStoryUid === null) {\n            return rawStoryUid;\n        }\n        const accentCharacters = /[\\u0300-\\u036f]/g;\n        return rawStoryUid.normalize('NFD').replace(accentCharacters, '');\n    }\n    /** Adds DOM element that angular will use as bootstrap component. */\n    initAngularRootElement(targetDOMNode, targetSelector) {\n        targetDOMNode.innerHTML = '';\n        targetDOMNode.appendChild(document.createElement(targetSelector));\n    }\n    fullRendererRequired({ targetDOMNode, storyFnAngular, moduleMetadata, forced, }) {\n        const previousStoryRenderInfo = this.previousStoryRenderInfo.get(targetDOMNode);\n        const currentStoryRender = {\n            storyFnAngular,\n            moduleMetadataSnapshot: stringify(moduleMetadata, { maxDepth: 50 }),\n        };\n        this.previousStoryRenderInfo.set(targetDOMNode, currentStoryRender);\n        if (\n        // check `forceRender` of story RenderContext\n        !forced ||\n            // if it's the first rendering and storyProps$ is not init\n            !this.storyProps$) {\n            return true;\n        }\n        // force the rendering if the template has changed\n        const hasChangedTemplate = !!storyFnAngular?.template &&\n            previousStoryRenderInfo?.storyFnAngular?.template !== storyFnAngular.template;\n        if (hasChangedTemplate) {\n            return true;\n        }\n        // force the rendering if the metadata structure has changed\n        const hasChangedModuleMetadata = currentStoryRender.moduleMetadataSnapshot !== previousStoryRenderInfo?.moduleMetadataSnapshot;\n        return hasChangedModuleMetadata;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}