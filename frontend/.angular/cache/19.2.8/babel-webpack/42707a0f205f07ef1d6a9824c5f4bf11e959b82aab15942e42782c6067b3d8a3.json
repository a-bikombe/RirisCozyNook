{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Arianna/Code/RirisCozyNook/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { DOCS_RENDERED, STORY_CHANGED } from 'storybook/internal/core-events';\nimport { addons } from 'storybook/preview-api';\nimport { AbstractRenderer, STORY_UID_ATTRIBUTE } from './AbstractRenderer';\nimport { getNextStoryUID } from './utils/StoryUID';\nexport class DocsRenderer extends AbstractRenderer {\n  render(options) {\n    var _superprop_getRender = () => super.render,\n      _this = this;\n    return _asyncToGenerator(function* () {\n      const channel = addons.getChannel();\n      /**\n       * Destroy and recreate the PlatformBrowserDynamic of angular For several stories to be rendered\n       * in the same docs we should not destroy angular between each rendering but do it when the\n       * rendered stories are not needed anymore.\n       *\n       * Note for improvement: currently there is one event per story rendered in the doc. But one\n       * event could be enough for the whole docs\n       */\n      channel.once(STORY_CHANGED, /*#__PURE__*/_asyncToGenerator(function* () {\n        yield DocsRenderer.resetApplications();\n      }));\n      /**\n       * Destroy and recreate the PlatformBrowserDynamic of angular when doc re render. Allows to call\n       * ngOnDestroy of angular for previous component\n       */\n      channel.once(DOCS_RENDERED, /*#__PURE__*/_asyncToGenerator(function* () {\n        yield DocsRenderer.resetApplications();\n      }));\n      yield _superprop_getRender().call(_this, {\n        ...options,\n        forced: false\n      });\n    })();\n  }\n  beforeFullRender(domNode) {\n    return _asyncToGenerator(function* () {\n      DocsRenderer.resetApplications(domNode);\n    })();\n  }\n  initAngularRootElement(targetDOMNode, targetSelector) {\n    super.initAngularRootElement(targetDOMNode, targetSelector);\n    targetDOMNode.setAttribute(STORY_UID_ATTRIBUTE, getNextStoryUID(targetDOMNode.id));\n  }\n}","map":{"version":3,"names":["DOCS_RENDERED","STORY_CHANGED","addons","AbstractRenderer","STORY_UID_ATTRIBUTE","getNextStoryUID","DocsRenderer","render","options","_superprop_getRender","_this","_asyncToGenerator","channel","getChannel","once","resetApplications","call","forced","beforeFullRender","domNode","initAngularRootElement","targetDOMNode","targetSelector","setAttribute","id"],"sources":["C:/Users/Arianna/Code/RirisCozyNook/frontend/node_modules/@storybook/angular/dist/client/angular-beta/DocsRenderer.mjs"],"sourcesContent":["import { DOCS_RENDERED, STORY_CHANGED } from 'storybook/internal/core-events';\nimport { addons } from 'storybook/preview-api';\nimport { AbstractRenderer, STORY_UID_ATTRIBUTE } from './AbstractRenderer';\nimport { getNextStoryUID } from './utils/StoryUID';\nexport class DocsRenderer extends AbstractRenderer {\n    async render(options) {\n        const channel = addons.getChannel();\n        /**\n         * Destroy and recreate the PlatformBrowserDynamic of angular For several stories to be rendered\n         * in the same docs we should not destroy angular between each rendering but do it when the\n         * rendered stories are not needed anymore.\n         *\n         * Note for improvement: currently there is one event per story rendered in the doc. But one\n         * event could be enough for the whole docs\n         */\n        channel.once(STORY_CHANGED, async () => {\n            await DocsRenderer.resetApplications();\n        });\n        /**\n         * Destroy and recreate the PlatformBrowserDynamic of angular when doc re render. Allows to call\n         * ngOnDestroy of angular for previous component\n         */\n        channel.once(DOCS_RENDERED, async () => {\n            await DocsRenderer.resetApplications();\n        });\n        await super.render({ ...options, forced: false });\n    }\n    async beforeFullRender(domNode) {\n        DocsRenderer.resetApplications(domNode);\n    }\n    initAngularRootElement(targetDOMNode, targetSelector) {\n        super.initAngularRootElement(targetDOMNode, targetSelector);\n        targetDOMNode.setAttribute(STORY_UID_ATTRIBUTE, getNextStoryUID(targetDOMNode.id));\n    }\n}\n"],"mappings":";AAAA,SAASA,aAAa,EAAEC,aAAa,QAAQ,gCAAgC;AAC7E,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,oBAAoB;AAC1E,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAO,MAAMC,YAAY,SAASH,gBAAgB,CAAC;EACzCI,MAAMA,CAACC,OAAO,EAAE;IAAA,IAAAC,oBAAA,GAAAA,CAAA,WAAAF,MAAA;MAAAG,KAAA;IAAA,OAAAC,iBAAA;MAClB,MAAMC,OAAO,GAAGV,MAAM,CAACW,UAAU,CAAC,CAAC;MACnC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;MACQD,OAAO,CAACE,IAAI,CAACb,aAAa,eAAAU,iBAAA,CAAE,aAAY;QACpC,MAAML,YAAY,CAACS,iBAAiB,CAAC,CAAC;MAC1C,CAAC,EAAC;MACF;AACR;AACA;AACA;MACQH,OAAO,CAACE,IAAI,CAACd,aAAa,eAAAW,iBAAA,CAAE,aAAY;QACpC,MAAML,YAAY,CAACS,iBAAiB,CAAC,CAAC;MAC1C,CAAC,EAAC;MACF,MAAMN,oBAAA,GAAAO,IAAA,CAAAN,KAAA,EAAa;QAAE,GAAGF,OAAO;QAAES,MAAM,EAAE;MAAM,CAAC,CAAC;IAAC;EACtD;EACMC,gBAAgBA,CAACC,OAAO,EAAE;IAAA,OAAAR,iBAAA;MAC5BL,YAAY,CAACS,iBAAiB,CAACI,OAAO,CAAC;IAAC;EAC5C;EACAC,sBAAsBA,CAACC,aAAa,EAAEC,cAAc,EAAE;IAClD,KAAK,CAACF,sBAAsB,CAACC,aAAa,EAAEC,cAAc,CAAC;IAC3DD,aAAa,CAACE,YAAY,CAACnB,mBAAmB,EAAEC,eAAe,CAACgB,aAAa,CAACG,EAAE,CAAC,CAAC;EACtF;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}