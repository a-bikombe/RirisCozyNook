{"ast":null,"code":"/** Count of stories for each storyId. */\nconst storyCounts = new Map();\n/**\n * Increments the count for a storyId and returns the next UID.\n *\n * When a story is bootstrapped, the storyId is used as the element tag. That becomes an issue when\n * a story is rendered multiple times in the same docs page. This function returns a UID that is\n * appended to the storyId to make it unique.\n *\n * @param storyId Id of a story\n * @returns Uid of a story\n */\nexport const getNextStoryUID = storyId => {\n  if (!storyCounts.has(storyId)) {\n    storyCounts.set(storyId, -1);\n  }\n  const count = storyCounts.get(storyId) + 1;\n  storyCounts.set(storyId, count);\n  return `${storyId}-${count}`;\n};\n/**\n * Clears the storyId counts.\n *\n * Can be useful for testing, where you need predictable increments, without reloading the global\n * state.\n *\n * If onlyStoryId is provided, only that storyId is cleared.\n *\n * @param onlyStoryId Id of a story\n */\nexport const clearStoryUIDs = onlyStoryId => {\n  if (onlyStoryId !== undefined && onlyStoryId !== null) {\n    storyCounts.delete(onlyStoryId);\n  } else {\n    storyCounts.clear();\n  }\n};","map":{"version":3,"names":["storyCounts","Map","getNextStoryUID","storyId","has","set","count","get","clearStoryUIDs","onlyStoryId","undefined","delete","clear"],"sources":["C:/Users/Arianna/Code/RirisCozyNook/frontend/node_modules/@storybook/angular/dist/client/angular-beta/utils/StoryUID.mjs"],"sourcesContent":["/** Count of stories for each storyId. */\nconst storyCounts = new Map();\n/**\n * Increments the count for a storyId and returns the next UID.\n *\n * When a story is bootstrapped, the storyId is used as the element tag. That becomes an issue when\n * a story is rendered multiple times in the same docs page. This function returns a UID that is\n * appended to the storyId to make it unique.\n *\n * @param storyId Id of a story\n * @returns Uid of a story\n */\nexport const getNextStoryUID = (storyId) => {\n    if (!storyCounts.has(storyId)) {\n        storyCounts.set(storyId, -1);\n    }\n    const count = storyCounts.get(storyId) + 1;\n    storyCounts.set(storyId, count);\n    return `${storyId}-${count}`;\n};\n/**\n * Clears the storyId counts.\n *\n * Can be useful for testing, where you need predictable increments, without reloading the global\n * state.\n *\n * If onlyStoryId is provided, only that storyId is cleared.\n *\n * @param onlyStoryId Id of a story\n */\nexport const clearStoryUIDs = (onlyStoryId) => {\n    if (onlyStoryId !== undefined && onlyStoryId !== null) {\n        storyCounts.delete(onlyStoryId);\n    }\n    else {\n        storyCounts.clear();\n    }\n};\n"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,OAAO,IAAK;EACxC,IAAI,CAACH,WAAW,CAACI,GAAG,CAACD,OAAO,CAAC,EAAE;IAC3BH,WAAW,CAACK,GAAG,CAACF,OAAO,EAAE,CAAC,CAAC,CAAC;EAChC;EACA,MAAMG,KAAK,GAAGN,WAAW,CAACO,GAAG,CAACJ,OAAO,CAAC,GAAG,CAAC;EAC1CH,WAAW,CAACK,GAAG,CAACF,OAAO,EAAEG,KAAK,CAAC;EAC/B,OAAO,GAAGH,OAAO,IAAIG,KAAK,EAAE;AAChC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAIC,WAAW,IAAK;EAC3C,IAAIA,WAAW,KAAKC,SAAS,IAAID,WAAW,KAAK,IAAI,EAAE;IACnDT,WAAW,CAACW,MAAM,CAACF,WAAW,CAAC;EACnC,CAAC,MACI;IACDT,WAAW,CAACY,KAAK,CAAC,CAAC;EACvB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}